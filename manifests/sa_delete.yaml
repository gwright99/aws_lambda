apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  name: deletelambda
  namespace: lambda
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: lambda
  name: deletelambda
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: deletelambda
  namespace: lambda
subjects:
- kind: ServiceAccount
  name: deletelambda
  namespace: lambda
roleRef:
  kind: Role #this must be Role or ClusterRole
  name: deletelambda # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: purgescript
  namespace: lambda
data:
  purge.sh: |
    apt update && apt install -y jq

    APISERVER=https://kubernetes.default.svc
    SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
    NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
    TOKEN=$(cat ${SERVICEACCOUNT}/token)
    CACERT=${SERVICEACCOUNT}/ca.crt

    CONTAINERNAME=$(curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/api/v1/namespaces/$NAMESPACE/pods | jq '.items[].metadata.name' | echo $(grep lambda) | xargs)
    curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X DELETE ${APISERVER}/api/v1/namespaces/$NAMESPACE/pods/$CONTAINERNAME