#!/bin/bash

# --------------------------------------------------------------------------------------
# FIRST ATTEMPT (WORKS)
# TOP-LEVEL ARTIFCT -- FORCE ALL APPS TO CYCLE (assuming ArgoCD focused on /manifests)
# Update and add a file in the manifests folder to force ArgoCD Resource Hook to trigger
# echo $(date) > manifests/trigger_argo_refresh3.yaml
# git add manifests/trigger_argo_refresh2.yaml 

# cat << EOF > manifests/argocd_dummy_trigger.yaml
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: argocd-dummy-trigger
#   namespace: lambda
# data:
#   foo: "$(date)"
# EOF

# git add manifests/argocd_dummy_trigger.yaml



# --------------------------------------------------------------------------------------
# SECOND ATTEMPT (WORKS)
# LOCALIZED TO SUBDIRECTORY BUT IS VERY NAIVE / STRICT ABOUT NAMING CONVENTION
# ONLY ADD DUMMY FILE TO LOCAL APP SUB-DIRECTORY

# create_dummy () {
# cat << EOF > $1/k8s_manifests/argocd_dummy_trigger.yaml
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: argocd-dummy-trigger-app$2
#   namespace: lambda
# data:
#   foo: "$(date)"
# EOF

# git add $1/k8s_manifests/argocd_dummy_trigger.yaml
# }


# # https://superuser.com/questions/552617/execute-git-pre-commit-hook-only-if-files-in-certain-directory-modified
# END=10
# for ((i=1;i<=END;i++)); do
#   # 0 means not found; 1 means pattern has been matched by at least 1 file.
#   if [[ $(git diff --cached --quiet --diff-filter=ACMR -- "apps/app$i/*"; echo $?) == 1 ]]; then
#     pwd
#     x="$PWD/apps/app$i"
#     create_dummy $x $i
#   fi
# done



# --------------------------------------------------------------------------------------
# FINAL ATTEMPT (WORKS)
# LOCALIZED TO SUBDIRECTORY BUT IS FLEXIBLE re NAMING. STILL EXPECTS CERTAIN FOLDER STRUCTURE.
# WARNING: SOLUTION MORE COMPLEX DUE TO USE OF 'xargs'

# HIGH LEVEL FLOW:
# 1) Get every staged file in the commit attempt.
# 2) For each file:
#    1) Extract root of filepath (i.e. 'apps/APPNAME')
#    2) Extract app name, and convert underscore to dashes
#    3) Update the manifest path for each root.
#
# NOTE:
#  1) Logic is inefficient since it'll regenerate a dummy file n times rather than just once per
#    folder. I'm ok with this since this logic can be executed quickly and means I dont need
#    to make already-complex code (IMO) even more complex.
#  2) Due to how xargs works, I had to separate the function into its own file and source it.
#     However, 'source' doesn't work with sh, so I had to use '.' instead.
#  3) Xargs command I used isn't entirely secure. Secure enough for my purposes however (and
#     easier to understand / maintain).

# REFERENCES:
#  - 'source' vs '.': https://askubuntu.com/questions/504546/error-message-source-not-found-when-running-a-script
#  - underscore to hyphen: https://stackoverflow.com/questions/53672192/replace-hyphens-with-underscores-in-bash-script
#  - multiple xarg commands / security: https://stackoverflow.com/questions/6958689/running-multiple-commands-with-xargs
#  - git diff filename pattern match: https://superuser.com/questions/552617/execute-git-pre-commit-hook-only-if-files-in-certain-directory-modified
#                                     https://stackoverflow.com/questions/2412450/git-pre-commit-hook-changed-added-files

if [[ $(git diff --cached --quiet --diff-filter=ACMR -- "apps/*"; echo $?) == 1 ]]; then

  echo "Found modified app files."

  # See notes above for explanation of logic and design
  git diff --cached --name-only --diff-filter=ACMR -- "apps/*" | \
  xargs -I % sh -c \
     'echo "$PWD";
      . "$PWD/.githooks/create_dummy";
      export APP_ROOT=$(echo % | cut -d/ -f 1-2);
      export APP_NAME=$(echo % | cut -d/ -f 2-2 | tr "-" "_");
      export APP_PATH="$PWD/$APP_ROOT";
      # env | grep APP_ROOT;
      # env | grep APP_NAME;
      # env | grep APP_PATH;
      create_dummy $APP_PATH $APP_NAME;'
fi